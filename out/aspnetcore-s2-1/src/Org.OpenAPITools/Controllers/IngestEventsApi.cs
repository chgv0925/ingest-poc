/*
 * GV.SCS.Store.Ingest
 *
 * Store for ingest
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Attributes;
using Microsoft.AspNetCore.Authorization;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class IngestEventsApiController : ControllerBase
    { 
        /// <summary>
        /// Add new event(s) to the store
        /// </summary>
        /// <param name="body">Event object that needs to be added to the store</param>
        /// <response code="201">successful operation</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Event not found.</response>
        /// <response code="405">Method not allowed.</response>
        /// <response code="500">Microservice failure, please retry.</response>
        /// <response code="501">Not implemented. This endpoint is read-only.</response>
        /// <response code="502">Microservice timeout, please retry.</response>
        /// <response code="0">An error occurred.</response>
        [HttpPost]
        [Route("/scs-store/ingest/events")]
        [ValidateModelState]
        [SwaggerOperation("AddEvent")]
        [SwaggerResponse(statusCode: 201, type: typeof(List<Event>), description: "successful operation")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Event not found.")]
        [SwaggerResponse(statusCode: 405, type: typeof(Error), description: "Method not allowed.")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Microservice failure, please retry.")]
        [SwaggerResponse(statusCode: 501, type: typeof(Error), description: "Not implemented. This endpoint is read-only.")]
        [SwaggerResponse(statusCode: 502, type: typeof(Error), description: "Microservice timeout, please retry.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "An error occurred.")]
        public virtual IActionResult AddEvent([FromBody]List<Object> body)
        { 

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(List<Event>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(Error));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            //TODO: Uncomment the next line to return response 501 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(501, default(Error));
            //TODO: Uncomment the next line to return response 502 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(502, default(Error));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"_id\" : \"uniqueEventId\",\n  \"_rev\" : \"1-..\",\n  \"type\" : \"event\",\n  \"name\" : \"Event 1\",\n  \"start\" : \"2000-01-01T20:00:00.00Z\",\n  \"end\" : \"2000-01-01T22:00:00.00Z\",\n  \"source\" : {\n    \"channel\" : \"8dde15c4-ca1b-4872-8082-58bfad889daa/London-MDI-1/London-SUM-1/C1,channel/summit\",\n    \"routerSource\" : \"https://..\"\n  },\n  \"classification\" : [ {\n    \"Sport\" : \"57:Tennis\"\n  }, {\n    \"Competition\" : \"1230:Gran Slam\"\n  }, {\n    \"Event\" : \"520:French Open\"\n  }, {\n    \"Round\" : \"1:\"\n  }, {\n    \"Disciplin\" : \"2:\"\n  }, {\n    \"Gender\" : \"57:Tennis\"\n  }, {\n    \"Sport\" : \"57:Tennis\"\n  } ],\n  \"seriesId\" : \"seriesId\",\n  \"series\" : {\n    \"_id\" : \"seriesId\",\n    \"_rev\" : \"1-..\",\n    \"type\" : \"series\",\n    \"start\" : \"2000-01-01T20:00:00.00Z\",\n    \"end\" : \"2000-01-01T22:00:00.00Z\",\n    \"repeat\" : \"EveryDay\",\n    \"endBy\" : \"2000-01-02\"\n  },\n  \"status\" : \"Ready\"\n}, {\n  \"_id\" : \"uniqueEventId\",\n  \"_rev\" : \"1-..\",\n  \"type\" : \"event\",\n  \"name\" : \"Event 1\",\n  \"start\" : \"2000-01-01T20:00:00.00Z\",\n  \"end\" : \"2000-01-01T22:00:00.00Z\",\n  \"source\" : {\n    \"channel\" : \"66037096-dbb8-4836-85db-9c0661a4b094/Paris-MDI-1/Paris-SUM-1/C1,channel/summit\",\n    \"routerSource\" : \"https://..\"\n  },\n  \"classification\" : [ {\n    \"Sport\" : \"57:Tennis\"\n  }, {\n    \"Competition\" : \"1230:Gran Slam\"\n  }, {\n    \"Event\" : \"520:French Open\"\n  }, {\n    \"Round\" : \"1:\"\n  }, {\n    \"Disciplin\" : \"2:\"\n  }, {\n    \"Gender\" : \"57:Tennis\"\n  }, {\n    \"Sport\" : \"57:Tennis\"\n  } ],\n  \"seriesId\" : \"seriesId\",\n  \"series\" : {\n    \"_id\" : \"seriesId\",\n    \"_rev\" : \"1-..\",\n    \"type\" : \"series\",\n    \"start\" : \"2000-01-01T20:00:00.00Z\",\n    \"end\" : \"2000-01-01T22:00:00.00Z\",\n    \"repeat\" : \"EveryDay\",\n    \"endBy\" : \"2000-01-02\"\n  },\n  \"status\" : \"Ready\"\n}, {\n  \"_id\" : \"uniqueEventId\",\n  \"_rev\" : \"1-..\",\n  \"type\" : \"event\",\n  \"name\" : \"Event 2\",\n  \"start\" : \"2000-01-02T20:00:00.00Z\",\n  \"end\" : \"2000-01-02T22:00:00.00Z\",\n  \"source\" : {\n    \"channel\" : \"8dde15c4-ca1b-4872-8082-58bfad889daa/London-MDI-1/London-SUM-1/C1,channel/summit\",\n    \"routerSource\" : \"https://..\"\n  },\n  \"classification\" : [ {\n    \"Sport\" : \"57:Tennis\"\n  }, {\n    \"Competition\" : \"1230:Gran Slam\"\n  }, {\n    \"Event\" : \"520:French Open\"\n  }, {\n    \"Round\" : \"1:\"\n  }, {\n    \"Disciplin\" : \"2:\"\n  }, {\n    \"Gender\" : \"57:Tennis\"\n  }, {\n    \"Sport\" : \"57:Tennis\"\n  } ],\n  \"seriesId\" : \"seriesId\",\n  \"series\" : {\n    \"_id\" : \"seriesId\",\n    \"_rev\" : \"1-..\",\n    \"type\" : \"series\",\n    \"start\" : \"2000-01-01T20:00:00.00Z\",\n    \"end\" : \"2000-01-01T22:00:00.00Z\",\n    \"repeat\" : \"EveryDay\",\n    \"endBy\" : \"2000-01-02\"\n  },\n  \"status\" : \"Ready\"\n}, {\n  \"_id\" : \"uniqueEventId\",\n  \"_rev\" : \"1-..\",\n  \"type\" : \"event\",\n  \"name\" : \"Event 2\",\n  \"start\" : \"2000-01-02T20:00:00.00Z\",\n  \"end\" : \"2000-01-02T22:00:00.00Z\",\n  \"source\" : {\n    \"channel\" : \"66037096-dbb8-4836-85db-9c0661a4b094/Paris-MDI-1/Paris-SUM-1/C1,channel/summit\",\n    \"routerSource\" : \"https://..\"\n  },\n  \"classification\" : [ {\n    \"Sport\" : \"57:Tennis\"\n  }, {\n    \"Competition\" : \"1230:Gran Slam\"\n  }, {\n    \"Event\" : \"520:French Open\"\n  }, {\n    \"Round\" : \"1:\"\n  }, {\n    \"Disciplin\" : \"2:\"\n  }, {\n    \"Gender\" : \"57:Tennis\"\n  }, {\n    \"Sport\" : \"57:Tennis\"\n  } ],\n  \"seriesId\" : \"seriesId\",\n  \"series\" : {\n    \"_id\" : \"seriesId\",\n    \"_rev\" : \"1-..\",\n    \"type\" : \"series\",\n    \"start\" : \"2000-01-01T20:00:00.00Z\",\n    \"end\" : \"2000-01-01T22:00:00.00Z\",\n    \"repeat\" : \"EveryDay\",\n    \"endBy\" : \"2000-01-02\"\n  },\n  \"status\" : \"Ready\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Event>>(exampleJson)
            : default(List<Event>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Remove an event from the store
        /// </summary>
        /// <param name="eventId">Event id to delete</param>
        /// <response code="204">successful operation</response>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Event not found</response>
        [HttpDelete]
        [Route("/scs-store/ingest/events/{eventId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteEventById")]
        public virtual IActionResult DeleteEventById([FromRoute][Required]string eventId)
        { 

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Remove event(s) from the store
        /// </summary>
        /// <param name="body">Event object that needs to be deleted from the store</param>
        /// <response code="204">successful operation</response>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Event not found</response>
        [HttpDelete]
        [Route("/scs-store/ingest/events")]
        [ValidateModelState]
        [SwaggerOperation("DeleteEvents")]
        public virtual IActionResult DeleteEvents([FromBody]EventDeleteDto body)
        { 

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Find an event by ID from the store
        /// </summary>
        /// <remarks>Returns a single event</remarks>
        /// <param name="eventId">ID of event to return</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Event not found</response>
        [HttpGet]
        [Route("/scs-store/ingest/events/{eventId}")]
        [ValidateModelState]
        [SwaggerOperation("GetEventById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Event), description: "successful operation")]
        public virtual IActionResult GetEventById([FromRoute][Required]string eventId)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Event));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "null";
            exampleJson = "<null>\n</null>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Event>(exampleJson)
            : default(Event);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Find event(s) from the store
        /// </summary>
        /// <remarks>Returns a collection of events</remarks>
        /// <response code="200">successful operation</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Event not found.</response>
        [HttpGet]
        [Route("/scs-store/ingest/events")]
        [ValidateModelState]
        [SwaggerOperation("GetEvents")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Event>), description: "successful operation")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Event not found.")]
        public virtual IActionResult GetEvents()
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Event>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "null";
            exampleJson = "<null>\n</null>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Event>>(exampleJson)
            : default(List<Event>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Modify an event in the store with form data
        /// </summary>
        /// <param name="eventId">ID of event that needs to be updated</param>
        /// <response code="200">successful operation</response>
        /// <response code="405">Invalid input</response>
        [HttpPut]
        [Route("/scs-store/ingest/events/{eventId}")]
        [ValidateModelState]
        [SwaggerOperation("UpdateEventById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Event), description: "successful operation")]
        public virtual IActionResult UpdateEventById([FromRoute][Required]string eventId)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Event));
            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405);
            string exampleJson = null;
            exampleJson = "null";
            exampleJson = "<null>\n</null>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Event>(exampleJson)
            : default(Event);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Modify event(s) in the store with form data
        /// </summary>
        /// <param name="events"></param>
        /// <param name="series"></param>
        /// <response code="200">successful operation</response>
        /// <response code="405">Invalid input</response>
        [HttpPut]
        [Route("/scs-store/ingest/events")]
        [ValidateModelState]
        [SwaggerOperation("UpdateEvents")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Event>), description: "successful operation")]
        public virtual IActionResult UpdateEvents([FromForm][Required()]List<EventModel> events, [FromForm]SeriesModel series)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Event>));
            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405);
            string exampleJson = null;
            exampleJson = "null";
            exampleJson = "<null>\n</null>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Event>>(exampleJson)
            : default(List<Event>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Modify an event status in the store
        /// </summary>
        /// <param name="eventId">ID of event that status needs to be updated</param>
        /// <param name="status">Status of event to be updated</param>
        /// <response code="200">successful operation</response>
        /// <response code="405">Invalid input</response>
        [HttpPut]
        [Route("/scs-store/ingest/events/{eventId}/status/{status}")]
        [ValidateModelState]
        [SwaggerOperation("UpdateStatusById")]
        public virtual IActionResult UpdateStatusById([FromRoute][Required]string eventId, [FromRoute][Required]string status)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405);

            throw new NotImplementedException();
        }
    }
}

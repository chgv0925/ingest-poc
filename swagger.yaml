swagger: "2.0"
info:
  description: "This is a sample server Eventstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Eventstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "10.251.52.230"
basePath: "/feedingest/v1/ingest"
tags:
- name: "event"
  description: "Everything about your events"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
schemes:
- "http"
- "https"
paths:
  /events:
    post:
      tags:
      - "event"
      summary: "Add a new event to the store"
      description: ""
      operationId: "addEvent"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Event object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/CreateEventDto"
      responses:
        405:
          description: "Invalid input"
      security:
      - eventstore_auth:
        - "write:events"
        - "read:events"
  /events/{eventId}:
    get:
      tags:
      - "event"
      summary: "Find event by ID"
      description: "Returns a single event"
      operationId: "getEventById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "eventId"
        in: "path"
        description: "ID of event to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Event"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Event not found"
      security:
      - api_Key: []
    put:
      tags:
      - "event"
      summary: "Updates a event in the store with form data"
      description: ""
      operationId: "updateEventWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "eventId"
        in: "path"
        description: "ID of event that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "body"
        in: "body"        
        description: "Event object that needs to be updated to the store"
        required: true
        schema:
          $ref: "#/definitions/UpdateEventDto"
      responses:
        405:
          description: "Invalid input"
      security:
      - eventstore_auth:
        - "write:events"
        - "read:events"
    delete:
      tags:
      - "event"
      summary: "Deletes a event"
      description: ""
      operationId: "deleteEvent"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "eventId"
        in: "path"
        description: "Event id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Event not found"
      security:
      - eventstore_auth:
        - "write:events"
        - "read:events"
securityDefinitions:
  eventstore_auth:
    type: "oauth2"
    authorizationUrl: "http://eventstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:events: "modify events in your account"
      read:events: "read your events"
  api_Key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Property:
    type: "object"
    properties:
      Key: 
        type: "string"
        default: "ChannelId"
      Value:
        type: "object"
      Type: 
        type: "string"
        enum:
          - "System.String"
          - "System.Boolean"
  Properties:
    type: "array"
    items:
        $ref: "#/definitions/Property"  
  EventChannel:
    type: "object"
    properties: 
      Instance: 
        type: "string"
      Properties:
        $ref: "#/definitions/Properties"
  EventChannels:
    type: "array"
    items: 
      $ref: "#/definitions/EventChannel"
  CreateEventDto:
    type: "object"
    properties:
      Id:
        type: "string"
        format: "uuid"
      EventChannels: 
        $ref: "#/definitions/EventChannels"   
      Properties:
        $ref: "#/definitions/Properties"
    example:
      Id: "{uuid}"
      EventChannels: 
        - Instance: "Main"
          Properties:
            - Key: "ChannelId"
              Value: "{channelId}"
            - Key: "ClipLocation"
              Value: "default"
              Type: "System.String"
            - Key: "IsAutoAssigned"
              Value: false  
      Properties:
        - Key: "Type"
          Value: "Feed"
        - Key: "ChannelType"
          Value: "PlayerRecorder"
        - Key: "Name"
          Value: "SFeed_{uuid}"
        - Key: "StartDateTime"
          Value: "2019-09-25T06:35:10.00Z"
        - Key: "EndDateTime"
          Value: "2019-09-25T06:35:50.00Z"
        - Key: "IsCrash"
          Value: false
  UpdateEventDto:
    type: "array"
    items:
      $ref: "#/definitions/Properties"
    example:
        - Key: "ChannelId"
          Value: "{channelId}"
        - Key: "ClipLocation"
          Value: "default"
          Type: "System.String"
  Event:
    type: "object"
    properties:
      Id:
        type: "string"
      EventChannels:
        $ref: "#/definitions/EventChannels"
      Properties:
        $ref: "#/definitions/Properties"
    xml:
      name: "Event"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"